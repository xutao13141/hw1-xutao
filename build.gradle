/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the 'eclipse' plugin so we can generate Eclipse project files
apply plugin: 'eclipse'

// Apply the 'idea' plugin so we can generate IntelliJ project files
apply plugin: 'idea'

// This project uses a few 3rd party libraries. Rather then downloading
// and installing them manually, which can be highly error-prone, we
// have Gradle do it for us. In the "repositories" section, we specify
// where we want to search for these 3rd party packages.
repositories {
    // Maven central is a website containing a large collection of
    // 3rd party libraries. It was originally meant to be used with the
    // Maven build tool, but it's so comprehensive other build tools decided
    // to just use this one instead of building a similar website.
    //
    // mavenLocal() refers a folder in your computer that contains any
    // libraries you may have already pre-downloaded; mavenCentral refers to
    // the actual website.
    mavenLocal()
    mavenCentral()
}


// Here, we list all the different libraries we plan on using.
// Gradle will automatically download them from the repositories listed above.
dependencies {
    implementation 'junit:junit:4.13.1'

    // We use jUnit to help us write tests.
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

// Here, we list some libraries that we use to augment this build script
// itself. Currently, we're augmenting gradle to make it easier for us
// to build and run GUI programs.
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}
sourceSets.main.java.srcDirs = ['src']
sourceSets.test.java.srcDirs = ['tst']

//testSet.main.java.tstDirs = ['tst']
// Log stdout and stderr in tests
test {
    testLogging {
        events = ["passed", "skipped", "failed"]
        showStandardStreams = true
        exceptionFormat = "full"
    }

    reports {
        html.enabled = true
    }
}
allprojects {
    tasks.withType(JavaForkOptions) {
        // Forked processes like GradleWorkerMain for tests won't steal focus!
        jvmArgs '-Djava.awt.headless=true'
    }
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion '8.23'
    configFile file("styleguide/egr222-checkstyle-rules.xml")
}
checkstyleMain {
    source ='src/main'
    //uncomment below line if you want to ignore checkstyle error and just continue building)
    ignoreFailures true
}
checkstyleTest {
    source ='src/tst/java'
}